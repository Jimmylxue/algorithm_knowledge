/**

36. 有效的数独
请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 

注意：

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
空白格用 '.' 表示。
 

示例 1：


输入：board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true
示例 2：

输入：board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

 */

/**
 * 题解：
 *  这题我的解题思路是常规的解题思路，正常的遍历二维数组，
 *  判断行、列、块中是否存在有相同的点
 *  行和列其实都相对来说比较好判断，真正复杂的是块的处理
 *
 * 块的处理我们需要根据每个点的坐标来进行处理，处理之前先初始化好一个二维数组 [[], [], [], [], [], [], [], [], []];
 *  然后将行和列分别处3 之后 根据行和列的值进行判断应该插入到具体的哪个数组中 根据 行*3+列 这个公式
 *  如 （5，5）这个点 计算之后 行=1 列=1  根据公式 行*3+列  = 4 所以应该放入数组的下标4的位置（从0开始的）
 *  能想到这一步 就能解题啦~
 */

/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {
  let rowGap = [];
  let colGap = [];
  let boxGap = [[], [], [], [], [], [], [], [], []];
  for (let i = 0; i < board.length; i++) {
    // 处理格子

    // 处理列
    colGap = [];
    for (let l = 0; l < board.length; l++) {
      if (board[l][i] !== '.') {
        if (colGap.includes(board[l][i])) {
          return false;
        } else {
          colGap.push(board[l][i]);
        }
      }
    }
    // 处理行
    for (let j = 0; j < board[i].length; j++) {
      // console.log(j);
      let m = parseInt(i / 3),
        n = parseInt(j / 3);
      // console.log(m * 3 + n, i, j);
      if (board[i][j] !== '.') {
        if (boxGap[m * 3 + n].includes(board[i][j])) {
          return false;
        } else {
          boxGap[m * 3 + n].push(board[i][j]);
        }
      }
      if (j === 0) {
        rowGap = [];
      }
      if (j <= board[i].length - 1) {
        if (board[i][j] !== '.') {
          if (rowGap.includes(board[i][j])) {
            return false;
          } else {
            rowGap.push(board[i][j]);
          }
        }
      }
    }
  }
  return true;
};

console.log(
  isValidSudoku([
    ['.', '.', '4', '.', '.', '.', '6', '3', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['5', '.', '.', '.', '.', '.', '.', '9', '.'],
    ['.', '.', '.', '5', '6', '.', '.', '.', '.'],
    ['4', '.', '3', '.', '.', '.', '.', '.', '1'],
    ['.', '.', '.', '7', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '5', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
  ])
);
